var searchIndex = new Map(JSON.parse('[\
["nominals",{"doc":"nominals","t":"FFFKFFGRFFFFFFFFFTFFFFPKFKFPFFFFKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNNNNNNNNNNNNNNNNNNNNN","n":["Chain","Chinese","Decimal","DigitCollection","DigitSet","EasternArabic","Error","Error","GreekLower","GreekUpper","HangeulJamo","HangeulSyllable","Hebrew","HexLower","HexUpper","HiraganaAiueo","HiraganaIroha","INLINE_CAPACITY","KatakanaAiueo","KatakanaIroha","LetterLower","LetterUpper","NoZeroSymbol","Nominal","NominalString","NominalSystem","OneBased","OutOfMemory","Persian","Restrict","RomanLowercase","RomanUpper","UnsignedInteger","Urdu","and","and","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","digit","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_nominal","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","has_zero_digit","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_inline","is_zero","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","lowercase","method","method","new","new","new","new","new","one_based","one_based","partial_cmp","partial_cmp","simplified","to_nominal","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traditional","try_format_nominal","try_format_nominal","try_format_nominal","try_format_nominal","try_format_nominal","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_string","try_push","try_push_front","try_push_str","try_to_nominal","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zero_based","zeroless"],"q":[[0,"nominals"],[462,"core::clone"],[463,"core::cmp"],[464,"core::cmp"],[465,"core::fmt"],[466,"core::hash"],[467,"core::hash"],[468,"core::option"],[469,"core::result"],[470,"core::convert"],[471,"core::convert"],[472,"core::marker"],[473,"core::any"]],"d":["A combination of two <code>DigitCollection</code> implementations.","A Chinese nominal system.","Western ASCII numeric digits.","An ordered collection of digits that can be used as a …","An ordered set of characters that can be treated as digits.","Eastern Arabic numeric digits.","Error types that can arise from formatting nominals in …","The error type that this system can produce.","Greek lowercase alphabet.","Greek uppercase alphabet.","Korean Hangul Jamo alphabet.","Korean Hangul alphabet as pronounced.","Hebrew numerals.","Hexadecimal lower ascii characters.","Hexadecimal uppercase ascii characters.","Japanese Hiaragana Aiueo alphabet.","Japanese Hiaragana Iroha alphabet.","The maximum byte capacity this type can contain before …","Japanese Katakana Aiueo alphabet.","Japanese Katakana Iroha alphabet.","ASCII lowercase characters.","ASCII uppercase characters.","A formatting request for index <code>0</code> was made against a …","A type that can be formatted with a <code>NominalSystem</code>.","A string that can contain most formatted nominals without …","A system of ordered nominal identifiers.","Begins counting at 1 when formatting a nominal identifier.","The nominal can’t be formatted with the available memory.","Persian numeric digits.","Restricts a set of digits to a specific length.","Lowercase Roman numerals.","Uppercase Roman numerals","An unsigned integer type.","Urdu numeric digits.","Chains <code>self</code> and <code>other</code> into a single <code>DigitCollection</code>.","Chains <code>self</code> and <code>other</code> into a single <code>DigitCollection</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines whether uppercase or lowercase characters are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the digit at location <code>index</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formats <code>nominal</code> using this system.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns true if this collection has a symbol representing <code>0</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this string is currently stored on the …","Returns true if <code>self</code> is 0.","Returns the number of digits in this collection.","","","","","","","","","","","","","","","","","","","","","","Returns this system as a lowercase system.","Returns this system with the updated counting <code>method</code>.","Determines the counting method. The default counting …","Returns a digit set whose first digit represents the <code>0</code> …","Returns a new combined set of digits.","Returns a new type that restricts <code>collection</code> to <code>count</code> …","Returns an empty string.","Returns <code>digits</code>, adjusted to start counting at 1.","Returns this collection that indicates counting should …","Returns this collection that indicates counting should …","","","Returns a simplified Chinese nominal system.","Returns <code>self</code> formatted as a nominal identifier using <code>system</code>…","","","","","","","","","","","","","","","","","","","","","Returns a traditional Chinese nominal system.","Tries to format <code>nominal</code> using this system.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the heap-allocated <code>String</code> inside of <code>self</code>, if <code>self</code> …","Pushes <code>ch</code> to the end of the string.","Pushes <code>ch</code> to the start of the string.","Pushes <code>str</code> to the end of the string.","Tries to format <code>self</code> as a nominal identifier using <code>system</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines whether to format using simplified or …","Returns true if this collection should start counting at 1 …","","","","","","","","","","","","","","","","","","","","","","Returns a digit set that does not have a symbol …"],"i":[0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,24,0,0,0,0,22,0,0,0,0,22,0,0,0,0,0,0,1,1,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,3,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,24,24,24,1,28,28,2,29,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,24,24,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,3,24,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,37,47,52,53,28,2,29,3,24,24,24,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,1,28,28,2,29,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,41,1,28,28,2,29,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,3,3,28,2,29,24,4,1,1,24,24,3,45,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,3,37,47,52,53,3,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,24,24,24,45,47,52,53,28,2,29,3,24,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,3,1,28,28,2,29,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,28],"f":"``````````````````````````````````{{bc}{{d{bc}}}b}0{ce{}{}}000000000000000000000000000000000000000000000000000`{ff}{{{h{c}}}{{h{c}}}j}{ll}{nn}{A`A`}{AbAb}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{{ce}Bn{}{}}000000000000000000{{C`C`}Cb}{{}C`}{C`c{}}0{{bCd}Cf}{{ChCd}Cf}0{{{d{ce}}Cd}Cfbb}{{{Cj{c}}Cd}Cfb}{{{h{c}}Cd}Cfb}{{lCd}Cf}{{nCd}Cf}{{A`Cd}Cf}{{AbCd}Cf}{{AdCd}Cf}{{AfCd}Cf}{{AhCd}Cf}{{AjCd}Cf}{{AlCd}Cf}{{AnCd}Cf}{{B`Cd}Cf}{{BbCd}Cf}{{BdCd}Cf}{{BfCd}Cf}{{BhCd}Cf}{{BjCd}Cf}{{ff}Cl}{{C`C`}Cl}{{C`Cn}Cl}0{{{h{c}}{h{c}}}ClD`}{{ll}Cl}{{nn}Cl}{{A`A`}Cl}{{AbAb}Cl}{{AdAd}Cl}{{AfAf}Cl}{{AhAh}Cl}{{AjAj}Cl}{{AlAl}Cl}{{AnAn}Cl}{{B`B`}Cl}{{BbBb}Cl}{{BdBd}Cl}{{BfBf}Cl}{{BhBh}Cl}{{BjBj}Cl}{{BlBl}Cl}{{fDb}Dd}{{C`Db}Dd}0{{{h{c}}Db}DdDf}{{lDb}Dd}{{nDb}Dd}{{A`Db}Dd}{{AbDb}Dd}{{AdDb}Dd}{{AfDb}Dd}{{AhDb}Dd}{{AjDb}Dd}{{AlDb}Dd}{{AnDb}Dd}{{B`Db}Dd}{{BbDb}Dd}{{BdDb}Dd}{{BfDb}Dd}{{BhDb}Dd}{{BjDb}Dd}{{BlDb}Dd}{{{Dj{}{{Dh{c}}}}e}C`Df{}}{cc{}}0000000{DlC`}{CfC`}{CnC`}333333333333333333{bCl}{ChCl}0{{{d{ce}}}Clbb}{{{Cj{c}}}Clb}{{{h{c}}}Clb}{lCl}{nCl}{A`Cl}{AbCl}{AdCl}{AfCl}{AhCl}{AjCl}{AlCl}{AnCl}{B`Cl}{BbCl}{BdCl}{BfCl}{BhCl}{BjCl}{{{h{c}}e}BnDnE`}{{lc}BnE`}{{nc}BnE`}{{A`c}BnE`}{{Abc}BnE`}{{Adc}BnE`}{{Afc}BnE`}{{Ahc}BnE`}{{Ajc}BnE`}{{Alc}BnE`}{{Anc}BnE`}{{B`c}BnE`}{{Bbc}BnE`}{{Bdc}BnE`}{{Bfc}BnE`}{{Bhc}BnE`}{{Bjc}BnE`}{ce{}{}}0000000000000000000000000{C`Cl}{EbCl}{bCd}{ChCd}0{{{d{ce}}}Cdbb}{{{Cj{c}}}Cdb}{{{h{c}}}Cdb}{lCd}{nCd}{A`Cd}{AbCd}{AdCd}{AfCd}{AhCd}{AjCd}{AlCd}{AnCd}{B`Cd}{BbCd}{BdCd}{BfCd}{BhCd}{BjCd}{ff}{{fEd}f}`{{{Ef{Cf}}}Ch}{{ce}{{d{ce}}}{}{}}{{Cdc}{{Cj{c}}}{}}{{}C`}{c{{h{c}}}{}}{b{{h{b}}}}0{{C`C`}{{Eh{Cb}}}}{{C`Cn}{{Eh{Cb}}}}{{}f}{{Ejc}C`{{Dj{Ej}}}}{ce{}{}}000000000000000000{cDl{}}3{{{Dj{}{{Dh{c}}}}e}{{El{C`c}}}Df{}}{{Enc}{{El{C`e}}}{Eb{Fb{F`}}{Ff{Fd}}}{}}{{Fhc}{{El{C`e}}}{Eb{Fb{F`}}}{}}{{Fjc}{{El{C`e}}}{Eb{Fb{F`}}}{}}{{fc}{{El{C`e}}}{FlFn}{}}{c{{El{e}}}{}{}}000000000000000000000000000000000000000000000000000{C`{{El{DlC`}}}}{{C`Cf}{{El{BnBl}}}}0{{C`Cn}{{El{BnBl}}}}{{Ejc}{{El{C`}}}{{Dj{Ej}}}}{cG`{}}0000000000000000000000000`{bCl}{ChCl}0{{{d{ce}}}Clbb}{{{Cj{c}}}Clb}{{{h{c}}}Clb}{lCl}{nCl}{A`Cl}{AbCl}{AdCl}{AfCl}{AhCl}{AjCl}{AlCl}{AnCl}{B`Cl}{BbCl}{BdCl}{BfCl}{BhCl}{BjCl}{{{Ef{Cf}}}Ch}","c":[],"p":[[10,"DigitCollection",0],[5,"Chain",0],[5,"Chinese",0],[5,"OneBased",0],[10,"Clone",462],[5,"Decimal",0],[5,"EasternArabic",0],[5,"Persian",0],[5,"Urdu",0],[5,"LetterUpper",0],[5,"LetterLower",0],[5,"GreekUpper",0],[5,"GreekLower",0],[5,"HiraganaAiueo",0],[5,"HiraganaIroha",0],[5,"KatakanaAiueo",0],[5,"KatakanaIroha",0],[5,"HangeulJamo",0],[5,"HangeulSyllable",0],[5,"HexUpper",0],[5,"HexLower",0],[6,"Error",0],[1,"unit"],[5,"NominalString",0],[6,"Ordering",463],[1,"usize"],[1,"char"],[5,"DigitSet",0],[5,"Restrict",0],[1,"bool"],[1,"str"],[10,"PartialEq",463],[5,"Formatter",464],[8,"Result",464],[10,"Debug",464],[17,"Error"],[10,"NominalSystem",0],[5,"String",465],[10,"Hash",466],[10,"Hasher",466],[10,"UnsignedInteger",0],[6,"ChineseCountMethod",467],[1,"array"],[6,"Option",468],[10,"Nominal",0],[6,"Result",469],[5,"Hebrew",0],[1,"u32"],[10,"TryFrom",470],[1,"u8"],[10,"From",470],[5,"RomanLowercase",0],[5,"RomanUpper",0],[10,"NumberToChinese",471],[10,"Copy",472],[5,"TypeId",473]],"b":[[132,"impl-DigitCollection-for-DigitSet%3CN,+true%3E"],[133,"impl-DigitCollection-for-DigitSet%3CN,+false%3E"],[154,"impl-PartialEq-for-NominalString"],[155,"impl-PartialEq%3Cstr%3E-for-NominalString"],[156,"impl-PartialEq%3C%26str%3E-for-NominalString"],[176,"impl-Display-for-NominalString"],[177,"impl-Debug-for-NominalString"],[205,"impl-From%3CString%3E-for-NominalString"],[206,"impl-From%3Cchar%3E-for-NominalString"],[207,"impl-From%3C%26str%3E-for-NominalString"],[227,"impl-DigitCollection-for-DigitSet%3CN,+true%3E"],[228,"impl-DigitCollection-for-DigitSet%3CN,+false%3E"],[294,"impl-DigitCollection-for-DigitSet%3CN,+false%3E"],[295,"impl-DigitCollection-for-DigitSet%3CN,+true%3E"],[325,"impl-PartialOrd-for-NominalString"],[326,"impl-PartialOrd%3Cstr%3E-for-NominalString"],[440,"impl-DigitCollection-for-DigitSet%3CN,+false%3E"],[441,"impl-DigitCollection-for-DigitSet%3CN,+true%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
